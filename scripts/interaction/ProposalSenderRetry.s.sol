// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.19;

import { console } from "forge-std/console.sol";
import "../Utils.s.sol";
import { AngleGovernor } from "contracts/AngleGovernor.sol";
import { ProposalReceiver } from "contracts/ProposalReceiver.sol";
import { ProposalSender } from "contracts/ProposalSender.sol";

contract ProposalSenderRetry is Utils {
    function run() external {
        // TODO can be modified to deploy on any chain
        uint256 srcChainId = CHAIN_ETHEREUM;
        uint256 destChainId = CHAIN_GNOSIS;
        uint64 nonce = 2;
        bytes
            memory payload = hex"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b2ea590fcea142dcceaeb3912da4c1df721848efd5062a000000000000000000000000b2ea590fcea142dcceaeb3912da4c1df721848ef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001517f000000000000000000000000000000000000000000000000000000000000002464d6235300000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        bytes memory adapterParams = hex"00010000000000000000000000000000000000000000000000000000000000024cd8";
        uint256 originalValue = 379501764453836;
        uint256 additionalValue = 279501764453836;
        // END

        uint256 privateKey = vm.envUint("KEEPER_PRIVATE_KEY");
        vm.startBroadcast(privateKey);
        address executor = vm.addr(privateKey);
        vm.label(executor, "Executor");

        ProposalSender sender = ProposalSender(payable(_chainToContract(srcChainId, ContractType.ProposalSender)));
        sender.retryExecute{ value: additionalValue }(nonce, _getLZChainId(destChainId), payload, adapterParams, originalValue);
    }
}
